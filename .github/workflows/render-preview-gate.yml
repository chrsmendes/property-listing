name: Render Preview Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  wait-for-render:
    name: Wait for Render Preview
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Wait for Render deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Aguardando deployment do Render para PR #${{ github.event.pull_request.number }}..."

          attempt=1
          max_attempts=30

          while [ $attempt -le $max_attempts ]; do
            # Pega a lista de deployments para este reposit√≥rio
            deployments_json=$(gh api repos/${{ github.repository }}/deployments)
            
            echo "üì¶ [DEBUG] Deployments JSON completo:"
            echo "$deployments_json" | jq '.'
            
            # Procura por deployment relacionado ao PR (por environment ou ref)
            deployment_status_url=$(echo "$deployments_json" | jq -r --arg ref "${{ github.head_ref }}" --arg pr "${{ github.event.pull_request.number }}" '
              ( (.[ ]? // []) | map(select(.ref == $ref or (.environment | test("pr-" + $pr; "i")))) | .[0] ).statuses_url // empty') || true
            
            if [ -n "$deployment_status_url" ]; then
              # Pega os statuses (array) do deployment
              statuses_json=$(gh api "$deployment_status_url")
              
              state=$(echo "$statuses_json" | jq -r '.[0].state // empty') || true
              url=$(echo "$statuses_json" | jq -r '.[0].environment_url // empty') || true

              if [ "$state" = "success" ]; then
                echo "‚úÖ Deployment conclu√≠do com sucesso!"
                echo "üîó Preview URL: $url"
                exit 0
              elif [ "$state" = "failure" ] || [ "$state" = "error" ]; then
                echo "‚ùå Deployment falhou com status: $state"
                exit 1
              fi
            else
              # Fallback: verificar commit status
              commit_status_json=$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/status)
              
              status_ctx=$(echo "$commit_status_json" | jq -r '.statuses[] | select(.context | test("render";"i")) | .state' | head -n1) || true
              
              if [ "$status_ctx" = "success" ]; then
                preview_url=$(echo "$commit_status_json" | jq -r '.statuses[] | select(.context | test("render";"i")) | .target_url' | head -n1) || true
                echo "‚úÖ Deploy status succeeded (fallback). URL: $preview_url"
                exit 0
              fi
            fi

            echo "‚è≥ Tentativa $attempt/$max_attempts - Status: ${state:-pending}"
            sleep 30
            attempt=$((attempt + 1))
          done

          echo "‚è±Ô∏è Timeout aguardando deployment do Render"
          exit 1
